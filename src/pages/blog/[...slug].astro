---
import fs from 'fs'
import { getCollection, render } from 'astro:content'

import FormattedDate from '../../components/atoms/FormattedDate.astro'

import Page from '../../components/templates/Page.astro'

export async function getStaticPaths() {
	const posts = await getCollection('blog')

	return posts.map((post) => {
		const { slug } = post

		const filename = `src/data/webmentions/${slug}.json`
		let webmentions = []
		if (fs.existsSync(filename)) {
			webmentions = JSON.parse(fs.readFileSync(filename, 'utf8'))
		}

		return {
			params: { slug },
			props: { post, webmentions },
		}
	})
}

const { post, webmentions } = Astro.props
const { data } = post
const { title, description, pubDate, updatedDate, hasCode } = data
const { Content } = await render(post)

// Structured data for blog post
const blogStructuredData = {
	title,
	description,
	pubDate: new Date(pubDate).toISOString(),
	updatedDate: updatedDate ? new Date(updatedDate).toISOString() : undefined,
	image: '/placeholder-social.jpg', // You can add image field to your blog posts frontmatter
}
---

<Page
	title={title}
	description={description}
	pubDate={pubDate}
	updatedDate={updatedDate}
	hasCode={hasCode}
	webmentions={webmentions}
	structuredDataType="BlogPosting"
	structuredData={blogStructuredData}
>
	<div class="container">
		<div class="blogPostHeader -highlight">
			<div class="content">
				<h1>{title}</h1>
				{
					updatedDate ? (
						<p>
							<small>
								Last updated on <FormattedDate date={updatedDate} />
							</small>
						</p>
					) : (
						<p>
							<small>
								Published on <FormattedDate date={pubDate} />
							</small>
						</p>
					)
				}
			</div>
		</div>
	</div>

	<div class="container content">
		<Content />
	</div>
</Page>

<style>
	.blogPostHeader {
		padding-block: var(--space-xl-2xl);
		margin-inline: calc(-1 * var(--space-xs-m));
		& .content {
			padding-inline: var(--space-xs-m);
		}
	}
</style>
